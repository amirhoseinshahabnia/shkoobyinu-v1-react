/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakingPoolInterface extends ethers.utils.Interface {
  functions: {
    "MAX_LOOP_ITERATIONS()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositCounter()": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "emergencyWithdrawMultiple(uint256[])": FunctionFragment;
    "endBlock()": FunctionFragment;
    "factory()": FunctionFragment;
    "getShkoobyVestedAmount(uint256)": FunctionFragment;
    "lockinBlocks()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stakingEndBlock()": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "startBlock()": FunctionFragment;
    "totalBlocksPerYear()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "tvl()": FunctionFragment;
    "withdrawShkooby(uint256)": FunctionFragment;
    "withdrawShkoobyMultiple(uint256[])": FunctionFragment;
    "withdrawVestedShkooby(uint256)": FunctionFragment;
    "withdrawVestedShkoobyMultiple(uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_LOOP_ITERATIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawMultiple",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getShkoobyVestedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockinBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlocksPerYear",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tvl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawShkooby",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawShkoobyMultiple",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVestedShkooby",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVestedShkoobyMultiple",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_LOOP_ITERATIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getShkoobyVestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockinBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBlocksPerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tvl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawShkooby",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawShkoobyMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVestedShkooby",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVestedShkoobyMultiple",
    data: BytesLike
  ): Result;

  events: {
    "Deposited(uint256,address,uint256,uint256)": EventFragment;
    "EmegencyWithdrawToken(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(uint256)": EventFragment;
    "WithdrawVestedReward(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmegencyWithdrawToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawVestedReward"): EventFragment;
}

export class StakingPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingPoolInterface;

  functions: {
    MAX_LOOP_ITERATIONS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_LOOP_ITERATIONS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    "depositCounter()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        startBlock: BigNumber;
        unlockBlock: BigNumber;
        user: string;
        depositState: number;
        vestedRewardUnlockBlock: BigNumber;
        vestedRewards: BigNumber;
      }
    >;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        startBlock: BigNumber;
        unlockBlock: BigNumber;
        user: string;
        depositState: number;
        vestedRewardUnlockBlock: BigNumber;
        vestedRewards: BigNumber;
      }
    >;

    emergencyWithdraw(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawMultiple(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emergencyWithdrawMultiple(uint256[])"(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "endBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    getShkoobyVestedAmount(
      depositNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getShkoobyVestedAmount(uint256)"(
      depositNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockinBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockinBlocks()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stakingEndBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    "stakingToken()"(overrides?: CallOverrides): Promise<[string]>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBlocksPerYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalBlocksPerYear()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tvl(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tvl()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawShkooby(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawShkooby(uint256)"(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawShkoobyMultiple(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawShkoobyMultiple(uint256[])"(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawVestedShkooby(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawVestedShkooby(uint256)"(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawVestedShkoobyMultiple(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawVestedShkoobyMultiple(uint256[])"(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_LOOP_ITERATIONS(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_LOOP_ITERATIONS()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCounter(overrides?: CallOverrides): Promise<BigNumber>;

  "depositCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, number, BigNumber, BigNumber] & {
      amount: BigNumber;
      startBlock: BigNumber;
      unlockBlock: BigNumber;
      user: string;
      depositState: number;
      vestedRewardUnlockBlock: BigNumber;
      vestedRewards: BigNumber;
    }
  >;

  "deposits(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, number, BigNumber, BigNumber] & {
      amount: BigNumber;
      startBlock: BigNumber;
      unlockBlock: BigNumber;
      user: string;
      depositState: number;
      vestedRewardUnlockBlock: BigNumber;
      vestedRewards: BigNumber;
    }
  >;

  emergencyWithdraw(
    depositNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    depositNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawMultiple(
    depositNumbers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emergencyWithdrawMultiple(uint256[])"(
    depositNumbers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  getShkoobyVestedAmount(
    depositNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getShkoobyVestedAmount(uint256)"(
    depositNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockinBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  "lockinBlocks()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "stakingEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  "stakingToken()"(overrides?: CallOverrides): Promise<string>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalBlocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBlocksPerYear()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tvl(overrides?: CallOverrides): Promise<BigNumber>;

  "tvl()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawShkooby(
    depositNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawShkooby(uint256)"(
    depositNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawShkoobyMultiple(
    depositNumbers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawShkoobyMultiple(uint256[])"(
    depositNumbers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawVestedShkooby(
    depositNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawVestedShkooby(uint256)"(
    depositNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawVestedShkoobyMultiple(
    depositNumbers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawVestedShkoobyMultiple(uint256[])"(
    depositNumbers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_LOOP_ITERATIONS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_LOOP_ITERATIONS()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "depositCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        startBlock: BigNumber;
        unlockBlock: BigNumber;
        user: string;
        depositState: number;
        vestedRewardUnlockBlock: BigNumber;
        vestedRewards: BigNumber;
      }
    >;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        startBlock: BigNumber;
        unlockBlock: BigNumber;
        user: string;
        depositState: number;
        vestedRewardUnlockBlock: BigNumber;
        vestedRewards: BigNumber;
      }
    >;

    emergencyWithdraw(
      depositNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      depositNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawMultiple(
      depositNumbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdrawMultiple(uint256[])"(
      depositNumbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    getShkoobyVestedAmount(
      depositNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getShkoobyVestedAmount(uint256)"(
      depositNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockinBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    "lockinBlocks()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    stakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    "stakingToken()"(overrides?: CallOverrides): Promise<string>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBlocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBlocksPerYear()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tvl(overrides?: CallOverrides): Promise<BigNumber>;

    "tvl()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawShkooby(
      depositNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawShkooby(uint256)"(
      depositNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawShkoobyMultiple(
      depositNumbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawShkoobyMultiple(uint256[])"(
      depositNumbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawVestedShkooby(
      depositNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawVestedShkooby(uint256)"(
      depositNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawVestedShkoobyMultiple(
      depositNumbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawVestedShkoobyMultiple(uint256[])"(
      depositNumbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposited(
      depositNumber: BigNumberish | null,
      depositor: string | null,
      amount: null,
      unlockBlock: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        depositNumber: BigNumber;
        depositor: string;
        amount: BigNumber;
        unlockBlock: BigNumber;
      }
    >;

    EmegencyWithdrawToken(
      depositNumber: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { depositNumber: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Withdraw(
      depositNumber: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { depositNumber: BigNumber }>;

    WithdrawVestedReward(
      depositNumber: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { depositNumber: BigNumber }>;
  };

  estimateGas: {
    MAX_LOOP_ITERATIONS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_LOOP_ITERATIONS()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "depositCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawMultiple(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emergencyWithdrawMultiple(uint256[])"(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getShkoobyVestedAmount(
      depositNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getShkoobyVestedAmount(uint256)"(
      depositNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockinBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    "lockinBlocks()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBlocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBlocksPerYear()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tvl(overrides?: CallOverrides): Promise<BigNumber>;

    "tvl()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawShkooby(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawShkooby(uint256)"(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawShkoobyMultiple(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawShkoobyMultiple(uint256[])"(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawVestedShkooby(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawVestedShkooby(uint256)"(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawVestedShkoobyMultiple(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawVestedShkoobyMultiple(uint256[])"(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_LOOP_ITERATIONS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_LOOP_ITERATIONS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositCounter()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawMultiple(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyWithdrawMultiple(uint256[])"(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getShkoobyVestedAmount(
      depositNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getShkoobyVestedAmount(uint256)"(
      depositNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockinBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockinBlocks()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingEndBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBlocksPerYear(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalBlocksPerYear()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tvl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tvl()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawShkooby(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawShkooby(uint256)"(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawShkoobyMultiple(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawShkoobyMultiple(uint256[])"(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawVestedShkooby(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawVestedShkooby(uint256)"(
      depositNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawVestedShkoobyMultiple(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawVestedShkoobyMultiple(uint256[])"(
      depositNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
