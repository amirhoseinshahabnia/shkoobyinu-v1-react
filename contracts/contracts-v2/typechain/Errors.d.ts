/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ErrorsInterface extends ethers.utils.Interface {
  functions: {
    "DEFENCE()": FunctionFragment;
    "EXCEEDS_MAX_ITERATION()": FunctionFragment;
    "LOCK_IN_BLOCK_LESS_THAN_MIN()": FunctionFragment;
    "ONLY_AFTER_END_BLOCK()": FunctionFragment;
    "ONLY_BEFORE_STAKING_ENDS()": FunctionFragment;
    "ONLY_DEPOSITOR()": FunctionFragment;
    "ONLY_DEPOSIT_OR_WITHDRAWN()": FunctionFragment;
    "ONLY_FACTORY_CAN_CALL()": FunctionFragment;
    "ONLY_POOLS_CAN_CALL()": FunctionFragment;
    "ONLY_WHEN_DEPOSITED()": FunctionFragment;
    "ONLY_WHEN_WITHDRAWN()": FunctionFragment;
    "SHOULD_BE_MORE_THAN_CLAIMED()": FunctionFragment;
    "SHOULD_BE_NON_ZERO()": FunctionFragment;
    "VESTED_TIME_NOT_REACHED()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DEFENCE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "EXCEEDS_MAX_ITERATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOCK_IN_BLOCK_LESS_THAN_MIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONLY_AFTER_END_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONLY_BEFORE_STAKING_ENDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONLY_DEPOSITOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONLY_DEPOSIT_OR_WITHDRAWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONLY_FACTORY_CAN_CALL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONLY_POOLS_CAN_CALL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONLY_WHEN_DEPOSITED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONLY_WHEN_WITHDRAWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SHOULD_BE_MORE_THAN_CLAIMED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SHOULD_BE_NON_ZERO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VESTED_TIME_NOT_REACHED",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "DEFENCE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EXCEEDS_MAX_ITERATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_IN_BLOCK_LESS_THAN_MIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONLY_AFTER_END_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONLY_BEFORE_STAKING_ENDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONLY_DEPOSITOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONLY_DEPOSIT_OR_WITHDRAWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONLY_FACTORY_CAN_CALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONLY_POOLS_CAN_CALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONLY_WHEN_DEPOSITED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONLY_WHEN_WITHDRAWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SHOULD_BE_MORE_THAN_CLAIMED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SHOULD_BE_NON_ZERO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VESTED_TIME_NOT_REACHED",
    data: BytesLike
  ): Result;

  events: {};
}

export class Errors extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ErrorsInterface;

  functions: {
    DEFENCE(overrides?: CallOverrides): Promise<[string]>;

    "DEFENCE()"(overrides?: CallOverrides): Promise<[string]>;

    EXCEEDS_MAX_ITERATION(overrides?: CallOverrides): Promise<[string]>;

    "EXCEEDS_MAX_ITERATION()"(overrides?: CallOverrides): Promise<[string]>;

    LOCK_IN_BLOCK_LESS_THAN_MIN(overrides?: CallOverrides): Promise<[string]>;

    "LOCK_IN_BLOCK_LESS_THAN_MIN()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    ONLY_AFTER_END_BLOCK(overrides?: CallOverrides): Promise<[string]>;

    "ONLY_AFTER_END_BLOCK()"(overrides?: CallOverrides): Promise<[string]>;

    ONLY_BEFORE_STAKING_ENDS(overrides?: CallOverrides): Promise<[string]>;

    "ONLY_BEFORE_STAKING_ENDS()"(overrides?: CallOverrides): Promise<[string]>;

    ONLY_DEPOSITOR(overrides?: CallOverrides): Promise<[string]>;

    "ONLY_DEPOSITOR()"(overrides?: CallOverrides): Promise<[string]>;

    ONLY_DEPOSIT_OR_WITHDRAWN(overrides?: CallOverrides): Promise<[string]>;

    "ONLY_DEPOSIT_OR_WITHDRAWN()"(overrides?: CallOverrides): Promise<[string]>;

    ONLY_FACTORY_CAN_CALL(overrides?: CallOverrides): Promise<[string]>;

    "ONLY_FACTORY_CAN_CALL()"(overrides?: CallOverrides): Promise<[string]>;

    ONLY_POOLS_CAN_CALL(overrides?: CallOverrides): Promise<[string]>;

    "ONLY_POOLS_CAN_CALL()"(overrides?: CallOverrides): Promise<[string]>;

    ONLY_WHEN_DEPOSITED(overrides?: CallOverrides): Promise<[string]>;

    "ONLY_WHEN_DEPOSITED()"(overrides?: CallOverrides): Promise<[string]>;

    ONLY_WHEN_WITHDRAWN(overrides?: CallOverrides): Promise<[string]>;

    "ONLY_WHEN_WITHDRAWN()"(overrides?: CallOverrides): Promise<[string]>;

    SHOULD_BE_MORE_THAN_CLAIMED(overrides?: CallOverrides): Promise<[string]>;

    "SHOULD_BE_MORE_THAN_CLAIMED()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    SHOULD_BE_NON_ZERO(overrides?: CallOverrides): Promise<[string]>;

    "SHOULD_BE_NON_ZERO()"(overrides?: CallOverrides): Promise<[string]>;

    VESTED_TIME_NOT_REACHED(overrides?: CallOverrides): Promise<[string]>;

    "VESTED_TIME_NOT_REACHED()"(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFENCE(overrides?: CallOverrides): Promise<string>;

  "DEFENCE()"(overrides?: CallOverrides): Promise<string>;

  EXCEEDS_MAX_ITERATION(overrides?: CallOverrides): Promise<string>;

  "EXCEEDS_MAX_ITERATION()"(overrides?: CallOverrides): Promise<string>;

  LOCK_IN_BLOCK_LESS_THAN_MIN(overrides?: CallOverrides): Promise<string>;

  "LOCK_IN_BLOCK_LESS_THAN_MIN()"(overrides?: CallOverrides): Promise<string>;

  ONLY_AFTER_END_BLOCK(overrides?: CallOverrides): Promise<string>;

  "ONLY_AFTER_END_BLOCK()"(overrides?: CallOverrides): Promise<string>;

  ONLY_BEFORE_STAKING_ENDS(overrides?: CallOverrides): Promise<string>;

  "ONLY_BEFORE_STAKING_ENDS()"(overrides?: CallOverrides): Promise<string>;

  ONLY_DEPOSITOR(overrides?: CallOverrides): Promise<string>;

  "ONLY_DEPOSITOR()"(overrides?: CallOverrides): Promise<string>;

  ONLY_DEPOSIT_OR_WITHDRAWN(overrides?: CallOverrides): Promise<string>;

  "ONLY_DEPOSIT_OR_WITHDRAWN()"(overrides?: CallOverrides): Promise<string>;

  ONLY_FACTORY_CAN_CALL(overrides?: CallOverrides): Promise<string>;

  "ONLY_FACTORY_CAN_CALL()"(overrides?: CallOverrides): Promise<string>;

  ONLY_POOLS_CAN_CALL(overrides?: CallOverrides): Promise<string>;

  "ONLY_POOLS_CAN_CALL()"(overrides?: CallOverrides): Promise<string>;

  ONLY_WHEN_DEPOSITED(overrides?: CallOverrides): Promise<string>;

  "ONLY_WHEN_DEPOSITED()"(overrides?: CallOverrides): Promise<string>;

  ONLY_WHEN_WITHDRAWN(overrides?: CallOverrides): Promise<string>;

  "ONLY_WHEN_WITHDRAWN()"(overrides?: CallOverrides): Promise<string>;

  SHOULD_BE_MORE_THAN_CLAIMED(overrides?: CallOverrides): Promise<string>;

  "SHOULD_BE_MORE_THAN_CLAIMED()"(overrides?: CallOverrides): Promise<string>;

  SHOULD_BE_NON_ZERO(overrides?: CallOverrides): Promise<string>;

  "SHOULD_BE_NON_ZERO()"(overrides?: CallOverrides): Promise<string>;

  VESTED_TIME_NOT_REACHED(overrides?: CallOverrides): Promise<string>;

  "VESTED_TIME_NOT_REACHED()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFENCE(overrides?: CallOverrides): Promise<string>;

    "DEFENCE()"(overrides?: CallOverrides): Promise<string>;

    EXCEEDS_MAX_ITERATION(overrides?: CallOverrides): Promise<string>;

    "EXCEEDS_MAX_ITERATION()"(overrides?: CallOverrides): Promise<string>;

    LOCK_IN_BLOCK_LESS_THAN_MIN(overrides?: CallOverrides): Promise<string>;

    "LOCK_IN_BLOCK_LESS_THAN_MIN()"(overrides?: CallOverrides): Promise<string>;

    ONLY_AFTER_END_BLOCK(overrides?: CallOverrides): Promise<string>;

    "ONLY_AFTER_END_BLOCK()"(overrides?: CallOverrides): Promise<string>;

    ONLY_BEFORE_STAKING_ENDS(overrides?: CallOverrides): Promise<string>;

    "ONLY_BEFORE_STAKING_ENDS()"(overrides?: CallOverrides): Promise<string>;

    ONLY_DEPOSITOR(overrides?: CallOverrides): Promise<string>;

    "ONLY_DEPOSITOR()"(overrides?: CallOverrides): Promise<string>;

    ONLY_DEPOSIT_OR_WITHDRAWN(overrides?: CallOverrides): Promise<string>;

    "ONLY_DEPOSIT_OR_WITHDRAWN()"(overrides?: CallOverrides): Promise<string>;

    ONLY_FACTORY_CAN_CALL(overrides?: CallOverrides): Promise<string>;

    "ONLY_FACTORY_CAN_CALL()"(overrides?: CallOverrides): Promise<string>;

    ONLY_POOLS_CAN_CALL(overrides?: CallOverrides): Promise<string>;

    "ONLY_POOLS_CAN_CALL()"(overrides?: CallOverrides): Promise<string>;

    ONLY_WHEN_DEPOSITED(overrides?: CallOverrides): Promise<string>;

    "ONLY_WHEN_DEPOSITED()"(overrides?: CallOverrides): Promise<string>;

    ONLY_WHEN_WITHDRAWN(overrides?: CallOverrides): Promise<string>;

    "ONLY_WHEN_WITHDRAWN()"(overrides?: CallOverrides): Promise<string>;

    SHOULD_BE_MORE_THAN_CLAIMED(overrides?: CallOverrides): Promise<string>;

    "SHOULD_BE_MORE_THAN_CLAIMED()"(overrides?: CallOverrides): Promise<string>;

    SHOULD_BE_NON_ZERO(overrides?: CallOverrides): Promise<string>;

    "SHOULD_BE_NON_ZERO()"(overrides?: CallOverrides): Promise<string>;

    VESTED_TIME_NOT_REACHED(overrides?: CallOverrides): Promise<string>;

    "VESTED_TIME_NOT_REACHED()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    DEFENCE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFENCE()"(overrides?: CallOverrides): Promise<BigNumber>;

    EXCEEDS_MAX_ITERATION(overrides?: CallOverrides): Promise<BigNumber>;

    "EXCEEDS_MAX_ITERATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    LOCK_IN_BLOCK_LESS_THAN_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    "LOCK_IN_BLOCK_LESS_THAN_MIN()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ONLY_AFTER_END_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "ONLY_AFTER_END_BLOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONLY_BEFORE_STAKING_ENDS(overrides?: CallOverrides): Promise<BigNumber>;

    "ONLY_BEFORE_STAKING_ENDS()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONLY_DEPOSITOR(overrides?: CallOverrides): Promise<BigNumber>;

    "ONLY_DEPOSITOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONLY_DEPOSIT_OR_WITHDRAWN(overrides?: CallOverrides): Promise<BigNumber>;

    "ONLY_DEPOSIT_OR_WITHDRAWN()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ONLY_FACTORY_CAN_CALL(overrides?: CallOverrides): Promise<BigNumber>;

    "ONLY_FACTORY_CAN_CALL()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONLY_POOLS_CAN_CALL(overrides?: CallOverrides): Promise<BigNumber>;

    "ONLY_POOLS_CAN_CALL()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONLY_WHEN_DEPOSITED(overrides?: CallOverrides): Promise<BigNumber>;

    "ONLY_WHEN_DEPOSITED()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONLY_WHEN_WITHDRAWN(overrides?: CallOverrides): Promise<BigNumber>;

    "ONLY_WHEN_WITHDRAWN()"(overrides?: CallOverrides): Promise<BigNumber>;

    SHOULD_BE_MORE_THAN_CLAIMED(overrides?: CallOverrides): Promise<BigNumber>;

    "SHOULD_BE_MORE_THAN_CLAIMED()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SHOULD_BE_NON_ZERO(overrides?: CallOverrides): Promise<BigNumber>;

    "SHOULD_BE_NON_ZERO()"(overrides?: CallOverrides): Promise<BigNumber>;

    VESTED_TIME_NOT_REACHED(overrides?: CallOverrides): Promise<BigNumber>;

    "VESTED_TIME_NOT_REACHED()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFENCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DEFENCE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXCEEDS_MAX_ITERATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EXCEEDS_MAX_ITERATION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LOCK_IN_BLOCK_LESS_THAN_MIN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LOCK_IN_BLOCK_LESS_THAN_MIN()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONLY_AFTER_END_BLOCK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ONLY_AFTER_END_BLOCK()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONLY_BEFORE_STAKING_ENDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ONLY_BEFORE_STAKING_ENDS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONLY_DEPOSITOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ONLY_DEPOSITOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONLY_DEPOSIT_OR_WITHDRAWN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ONLY_DEPOSIT_OR_WITHDRAWN()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONLY_FACTORY_CAN_CALL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ONLY_FACTORY_CAN_CALL()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONLY_POOLS_CAN_CALL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ONLY_POOLS_CAN_CALL()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONLY_WHEN_DEPOSITED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ONLY_WHEN_DEPOSITED()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONLY_WHEN_WITHDRAWN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ONLY_WHEN_WITHDRAWN()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SHOULD_BE_MORE_THAN_CLAIMED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SHOULD_BE_MORE_THAN_CLAIMED()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SHOULD_BE_NON_ZERO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SHOULD_BE_NON_ZERO()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VESTED_TIME_NOT_REACHED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "VESTED_TIME_NOT_REACHED()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
